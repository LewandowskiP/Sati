/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames.Panels;

import Exceptions.NotEnoughtAromaException;
import Exceptions.NotEnoughtCoffeeException;
import Exceptions.NotMatchingCoffeeWeightException;
import Exceptions.ResourceNotFoundException;
import GreenCoffeeClasses.CoffeeGreenChangeHistory;
import Listeners.CheckBoxAromaRoastRaport;
import Listeners.CheckBoxGreenCoffeeRoastRaport;
import ProductClasses.AromaChangeHistory;
import ProductClasses.RoastAromaPart;
import ProductClasses.RoastGreenCoffeePart;
import ProductClasses.RoastPart;
import ProductClasses.RoastRaport;
import ProductionManagement.DataBaseConnector;
import ProductionManagement.Global;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Przemysław
 */
public class EditRaportRoastPanel extends javax.swing.JPanel {

    DataBaseConnector dbc = null;
    RoastRaport oldRoastRaport;

    public boolean raportSentWarden = false;

    private final int labIdColumnCoffee = 0;
    private final int weightColumnCoffee = 2;
    private final int labIdColumnAroma = 0;
    private final int weightColumnAroma = 2;

    /**
     * Creates new form NewRaportRoastPanel
     */
    private void setControls(boolean state) {

        tableRoastAromaPart.setEnabled(state);
        tableRoastGreenCoffeePart.setEnabled(state);
        textFieldOtherInfo.setEnabled(state);
        buttonSendRaport.setEnabled(state);
    }

    public EditRaportRoastPanel(RoastRaport rr) {
        initComponents();
        tableRoastPart.setEnabled(false);
        if (dbc == null) {
            dbc = Global.getDataBaseConnector();
            dbc.openSession();
        }
        oldRoastRaport = rr;
        DefaultTableModel dtm = (DefaultTableModel) tableRoastPart.getModel();
        dtm.setRowCount(0);
        for (RoastPart rp : rr.getRoastPart()) {
            if (rp.isTemperature()) {
                dtm.addRow(new Object[]{rp.getSourceWeight(), rp.getRoastedWeight(), "OK", rp.getColour()});
            } else {
                dtm.addRow(new Object[]{rp.getSourceWeight(), rp.getRoastedWeight(), "ZŁA", rp.getColour()});
            }
        }
        dtm.setRowCount(35);
        DefaultTableModel dtm2 = (DefaultTableModel) tableRoastGreenCoffeePart.getModel();
        dtm2.setRowCount(0);
        for (RoastGreenCoffeePart rgcp : rr.getRoastGreenCoffeePart()) {
            dtm2.addRow(new Object[]{rgcp.getCoffeeGreen().getLabId(), rgcp.getCoffeeGreen().getCoffeeType(), rgcp.getWeight(), false, false});
        }
        dtm2.setRowCount(10);
        DefaultTableModel dtm3 = (DefaultTableModel) tableRoastAromaPart.getModel();
        dtm.setRowCount(3);
        for (RoastAromaPart rap : rr.getRoastAromaPart()) {
            dtm3.addRow(new Object[]{rap.getAroma().getAromaType(), rap.getAroma().getAromaType(), rap.getQuantity(), false, false});
        }
        dtm3.setRowCount(10);
        tableRoastAromaPart.getModel().addTableModelListener(new CheckBoxAromaRoastRaport());
        tableRoastGreenCoffeePart.getModel().addTableModelListener(new CheckBoxGreenCoffeeRoastRaport(3, 4));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonSendRaport = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableRoastGreenCoffeePart = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableRoastAromaPart = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableRoastPart = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        textFieldOtherInfo = new javax.swing.JTextPane();

        buttonSendRaport.setText("Wyślij raport");
        buttonSendRaport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendRaportActionPerformed(evt);
            }
        });

        tableRoastGreenCoffeePart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nr. Zlec. Kontr.", "Kawa", "Ilość [Kg]", "+", "-"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Float.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableRoastGreenCoffeePart.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableRoastGreenCoffeePart);
        if (tableRoastGreenCoffeePart.getColumnModel().getColumnCount() > 0) {
            tableRoastGreenCoffeePart.getColumnModel().getColumn(0).setResizable(false);
            tableRoastGreenCoffeePart.getColumnModel().getColumn(2).setResizable(false);
            tableRoastGreenCoffeePart.getColumnModel().getColumn(2).setPreferredWidth(100);
            tableRoastGreenCoffeePart.getColumnModel().getColumn(3).setResizable(false);
            tableRoastGreenCoffeePart.getColumnModel().getColumn(3).setPreferredWidth(30);
            tableRoastGreenCoffeePart.getColumnModel().getColumn(4).setResizable(false);
            tableRoastGreenCoffeePart.getColumnModel().getColumn(4).setPreferredWidth(30);
        }

        jLabel3.setText("Wprowadź kolejne palenia");

        jLabel4.setText("Wprowadź użyte aromaty");

        tableRoastAromaPart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nr. Zlec. Kontr.", "Aromat", "Ilość", "+", "-"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Float.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableRoastAromaPart.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableRoastAromaPart);
        if (tableRoastAromaPart.getColumnModel().getColumnCount() > 0) {
            tableRoastAromaPart.getColumnModel().getColumn(0).setResizable(false);
            tableRoastAromaPart.getColumnModel().getColumn(2).setResizable(false);
            tableRoastAromaPart.getColumnModel().getColumn(2).setPreferredWidth(100);
            tableRoastAromaPart.getColumnModel().getColumn(3).setResizable(false);
            tableRoastAromaPart.getColumnModel().getColumn(3).setPreferredWidth(30);
            tableRoastAromaPart.getColumnModel().getColumn(4).setResizable(false);
            tableRoastAromaPart.getColumnModel().getColumn(4).setPreferredWidth(30);
        }

        tableRoastPart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Zielona", "Palona", "Temp", "Kolor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableRoastPart.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tableRoastPart);
        if (tableRoastPart.getColumnModel().getColumnCount() > 0) {
            tableRoastPart.getColumnModel().getColumn(0).setResizable(false);
            tableRoastPart.getColumnModel().getColumn(1).setResizable(false);
            tableRoastPart.getColumnModel().getColumn(2).setResizable(false);
            tableRoastPart.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel5.setText("Wprowadź użyte kawy zielone");

        jScrollPane5.setViewportView(textFieldOtherInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(buttonSendRaport, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(69, 69, 69))
                        .addComponent(buttonSendRaport)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSendRaportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendRaportActionPerformed
        try {
            dbc.openSession();

            Float totalSourceWeight;
            Float totalSourceWeightFromGreenCoffee = new Float(0);
            totalSourceWeight = Global.round(oldRoastRaport.getTotalSourceWeight(), 1);

            HashSet<RoastGreenCoffeePart> hsrgcp = new HashSet<RoastGreenCoffeePart>(0);
            for (int i = 0; i < tableRoastGreenCoffeePart.getModel().getRowCount(); i++) {
                if (tableRoastGreenCoffeePart.getModel().getValueAt(i, 0) == null) {
                    break;
                }
                RoastGreenCoffeePart rgcp = new RoastGreenCoffeePart();
                rgcp.setWeight((Float) tableRoastGreenCoffeePart.getModel().getValueAt(i, weightColumnCoffee));
                rgcp.setCoffeeGreen(dbc.getCoffeeGreenWithLabId(tableRoastGreenCoffeePart.getModel().getValueAt(i, labIdColumnCoffee)));
                if (rgcp.getCoffeeGreen() == null) {
                    throw new ResourceNotFoundException((String) tableRoastGreenCoffeePart.getModel().getValueAt(i, labIdColumnCoffee));
                }
                if (rgcp.getCoffeeGreen().getCurrentWeight() - rgcp.getWeight() < 0) {
                    throw new NotEnoughtCoffeeException(rgcp.getCoffeeGreen().getLabId());
                }
                totalSourceWeightFromGreenCoffee += rgcp.getWeight();
                hsrgcp.add(rgcp);
            }
            oldRoastRaport.setRoastGreenCoffeePart(hsrgcp);

            totalSourceWeightFromGreenCoffee = Global.round(totalSourceWeightFromGreenCoffee, 1);

            if (!totalSourceWeightFromGreenCoffee.equals(totalSourceWeight)) {
                System.out.println(totalSourceWeight);
                System.out.println(totalSourceWeightFromGreenCoffee);
                throw new NotMatchingCoffeeWeightException("Ilość kawy pobranej nie zgadza się z ilością kawy w piecu.");
            }
            if (totalSourceWeight == 0) {
                throw new NotMatchingCoffeeWeightException("Ilość kawy równa zero, proszę uzupełnić raport.");
            }

            if (tableRoastAromaPart.getModel().getRowCount() != 0) {
                HashSet<RoastAromaPart> hsrap = new HashSet<RoastAromaPart>(0);
                for (int i = 0; i < tableRoastAromaPart.getModel().getRowCount(); i++) {
                    if (tableRoastAromaPart.getModel().getValueAt(i, 0) == null) {
                        break;
                    }
                    RoastAromaPart rap = new RoastAromaPart();
                    rap.setQuantity((Float) tableRoastAromaPart.getModel().getValueAt(i, weightColumnAroma));
                    rap.setAroma(dbc.getAromaWithLabId(tableRoastAromaPart.getModel().getValueAt(i, labIdColumnAroma)));
                    if (rap.getAroma() == null) {
                        throw new ResourceNotFoundException((String) tableRoastAromaPart.getModel().getValueAt(i, labIdColumnAroma));
                    }
                    if (rap.getAroma().getQuantity() - rap.getQuantity() < 0) {
                        throw new NotEnoughtAromaException(rap.getAroma().getLabId());
                    }
                    hsrap.add(rap);
                }
                oldRoastRaport.setRoastAromaPart(hsrap);
            }
            String[] options = new String[2];
            options[0] = "Zatwierdź";
            options[1] = "Odrzuć";
            int result = JOptionPane.showOptionDialog(this, new DetailsRoastRaportPanel(oldRoastRaport), "Potwierdź raport", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
            if (JOptionPane.OK_OPTION == result) {
                dbc.startTransation();
                for (RoastGreenCoffeePart rgcp : oldRoastRaport.getRoastGreenCoffeePart()) {
                    rgcp.getCoffeeGreen().setCurrentWeight(rgcp.getCoffeeGreen().getCurrentWeight() - rgcp.getWeight());
                    CoffeeGreenChangeHistory cgch = new CoffeeGreenChangeHistory();
                    cgch.setChangeTime(oldRoastRaport.getCompleteTime());
                    cgch.setChangedBy(oldRoastRaport.getCompletedBy());
                    cgch.setRoastRaport(oldRoastRaport);
                    cgch.setComment("PALENIE " + oldRoastRaport.getProductType());
                    cgch.setWeight(-1 * rgcp.getWeight());
                    cgch.setCoffeeGreen(rgcp.getCoffeeGreen());
                    dbc.saveTransation(cgch);
                    rgcp.getCoffeeGreen().getCoffeeGreenChangeHistory().add(cgch);
                    if (rgcp.getCoffeeGreen().getCurrentWeight() == 0) {
                        rgcp.getCoffeeGreen().setState(Global.COFFEE_GREEN_OUT_OF_STORE);
                    }
                    rgcp.setRoastRaport(oldRoastRaport);
                }
                for (RoastAromaPart rap : oldRoastRaport.getRoastAromaPart()) {
                    rap.getAroma().setQuantity(rap.getAroma().getQuantity() - rap.getQuantity());
                    AromaChangeHistory ach = new AromaChangeHistory();
                    ach.setChangeTime(oldRoastRaport.getCompleteTime());
                    ach.setChangedBy(oldRoastRaport.getCompletedBy());
                    ach.setRoastRaport(oldRoastRaport);
                    ach.setComment("PALENIE " + oldRoastRaport);
                    ach.setWeight(-1 * rap.getQuantity());
                    ach.setAroma(rap.getAroma());
                    dbc.saveTransation(ach);
                    rap.getAroma().getAromaChangeHistory().add(ach);
                    if (rap.getAroma().getQuantity() == 0) {
                        rap.getAroma().setState(Global.OUT_OF_STORE);
                    }
                    rap.setRoastRaport(oldRoastRaport);
                }
                raportSentWarden = true;
                System.out.println("OK@");
            }
        } catch (NotEnoughtCoffeeException e) {
            JOptionPane.showMessageDialog(this, ("Nie wystarczająca ilość kawy o ID " + e.getMessage()));
            dbc.rollbackTransation();
        } catch (NotEnoughtAromaException e) {
            JOptionPane.showMessageDialog(this, ("Nie wystarczająca ilość aromatu o ID " + e.getMessage()));
            dbc.rollbackTransation();
        } catch (NotMatchingCoffeeWeightException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
            dbc.rollbackTransation();
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Wprowadzone dane nie zostały zatwierdzone lub są błędnie wprowadzone.");
            dbc.rollbackTransation();
        } catch (ResourceNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Kawa lub aromat o ID " + ex.getMessage() + " nie istnieje.");
            dbc.rollbackTransation();
        }
    }//GEN-LAST:event_buttonSendRaportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSendRaport;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable tableRoastAromaPart;
    private javax.swing.JTable tableRoastGreenCoffeePart;
    private javax.swing.JTable tableRoastPart;
    private javax.swing.JTextPane textFieldOtherInfo;
    // End of variables declaration//GEN-END:variables
}
