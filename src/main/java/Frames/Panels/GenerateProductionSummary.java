/* 
 * Copyright 2018 Cafe Sati Polska.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Frames.Panels;

import ProductClasses.InstantCoffeeMixRaport;
import ProductClasses.ProductType;
import ProductClasses.RoastRaport;
import ProductionClasses.ProductionRaportCoffeeAssignment;
import ProductionClasses.ProductionRaportPart;
import ProductionManagement.DataBaseConnector;
import ProductionManagement.Global;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Przemysław
 */
public class GenerateProductionSummary extends javax.swing.JPanel {

    /**
     * Creates new form GenerateTotalProductionRaport
     */
    DataBaseConnector dbc;
    String directoryUrl;

    Object[] headerTotalRoast = {"Data palenia", "Ubytek", "Suma kawy zielonej", "Suma kawy palonej", "Typ produktu"};
    Object[] headerTotalProduct = {"Nazwa produktu", "Zasyp Kg", "KG", "SZT"};
    Object[] headerMixes = {"Data mieszania ", "Waga", "Typ produktu"};

    Object[] headerBean = {"Kawa ziarnista"};
    Object[] headerGrind = {"Kawa mielona"};
    Object[] headerInstant = {"Kawa instant"};
    XSSFSheet sheet;

    private final int padding = 2;

    private final int globalRowOffset = 2;
    private final int beanOffset;
    private final int grindOffset;
    private final int roastOffset;

    private final int instantOffset;
    private final int mixOffset;

    public GenerateProductionSummary() {
        initComponents();

        roastOffset = 1;
        beanOffset = roastOffset + headerTotalRoast.length + padding;
        grindOffset = beanOffset + headerTotalProduct.length + padding;

        mixOffset = 1;
        instantOffset = mixOffset + headerMixes.length + padding;

        dbc = Global.getDataBaseConnector();
        dbc.openSession();
        SimpleDateFormat model = new SimpleDateFormat("MM-yy");
        spinnerDate.setEditor(new JSpinner.DateEditor(spinnerDate, model.toPattern()));
        textFieldFileName.setText(model.format((Date) spinnerDate.getValue()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        spinnerDate = new javax.swing.JSpinner();
        textFieldFileName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        buttonChooseSaveCatalog = new javax.swing.JButton();
        buttonGenerate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        textFieldFullPath = new javax.swing.JTextField();

        jLabel1.setText("Wybierz date ");

        spinnerDate.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MONTH));
        spinnerDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerDateStateChanged(evt);
            }
        });

        jLabel2.setText("Nazwa pliku docelowego (domyślnie data)");

        buttonChooseSaveCatalog.setText("Wybierz folder zapisu");
        buttonChooseSaveCatalog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChooseSaveCatalogActionPerformed(evt);
            }
        });

        buttonGenerate.setText("Generuj");
        buttonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformed(evt);
            }
        });

        jLabel3.setText("Miejsce zapisu wygenerowanego raportu");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textFieldFullPath)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinnerDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(textFieldFileName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(buttonChooseSaveCatalog)
                            .addComponent(jLabel3)
                            .addComponent(buttonGenerate))
                        .addGap(0, 507, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(spinnerDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonChooseSaveCatalog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldFullPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonGenerate)
                .addContainerGap(35, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonChooseSaveCatalogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChooseSaveCatalogActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.showOpenDialog(this);
        directoryUrl = fileChooser.getSelectedFile().getAbsolutePath();
        if (directoryUrl != null) {
            textFieldFullPath.setText(directoryUrl + "\\Podsumowanie-" + textFieldFileName.getText() + ".xlsx");
        } else {
            JOptionPane.showMessageDialog(this, "Błąd");
        }
    }//GEN-LAST:event_buttonChooseSaveCatalogActionPerformed

    private void buttonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformed
        try {
            Date now = XSSFFunctions.trimMonth((Date) spinnerDate.getValue());
            Date nextMonth = XSSFFunctions.trimMonthDown(XSSFFunctions.addMonth(now));
            now = XSSFFunctions.trimMonthDown(now);
            Timestamp from = new Timestamp(now.getTime());
            Timestamp to = new Timestamp(nextMonth.getTime());

            ArrayList<RoastRaport> alrr = dbc.getRoastRaportWithFromTo(from, to);
            ArrayList<ProductionRaportPart> alprp = dbc.getProductionRaportPartWithFromTo(from, to);
            ArrayList<InstantCoffeeMixRaport> alicmr = dbc.getInstantCoffeeMixRaportWithFromToEmployee(from, to);
            ArrayList<RoastData> roast = new ArrayList<>();
            ArrayList<ProductionData> grind = new ArrayList<>();
            ArrayList<ProductionData> bean = new ArrayList<>();
            ArrayList<ProductionData> instant = new ArrayList<>();
            ArrayList<MixData> mix = new ArrayList<>();

            buildRoasts(roast, alrr);
            buildGrind(grind, alprp);
            buildBean(bean, alprp);
            buildInstant(instant, alprp);
            buildMixes(mix, alicmr);

            XSSFWorkbook wb = new XSSFWorkbook();
            sheet = wb.createSheet("Konwencjonalna");
            sheet.setZoom(85);
            XSSFFunctions.fillHeader(sheet, headerTotalRoast, roastOffset, globalRowOffset);
            XSSFFunctions.fillData(sheet, roast.toArray(), roastOffset, globalRowOffset + 1);
            XSSFFunctions.fixHeaderStyle(sheet, wb, headerTotalRoast.length, roastOffset, 1, globalRowOffset);
            XSSFFunctions.fixCellStyle(sheet, wb, headerTotalRoast.length, roast.size(), roastOffset, globalRowOffset + 1);
            XSSFFunctions.fixCellFormat(sheet, wb, 3, roast.size(), roastOffset + 1, globalRowOffset + 1);

            XSSFFunctions.fillHeader(sheet, headerGrind, grindOffset, globalRowOffset - 1);
            XSSFFunctions.fillHeader(sheet, headerTotalProduct, grindOffset, globalRowOffset);
            XSSFFunctions.fillData(sheet, grind.toArray(), grindOffset, globalRowOffset + 1);
            XSSFFunctions.fixHeaderStyle(sheet, wb, headerGrind.length, 1, grindOffset, globalRowOffset - 1);
            XSSFFunctions.fixHeaderStyle(sheet, wb, headerTotalProduct.length, 1, grindOffset, globalRowOffset);
            XSSFFunctions.fixCellStyle(sheet, wb, headerTotalProduct.length, grind.size(), grindOffset, globalRowOffset + 1);
            XSSFFunctions.fixCellFormat(sheet, wb, 2, grind.size(), grindOffset + 1, globalRowOffset + 1);

            XSSFFunctions.fillHeader(sheet, headerBean, beanOffset, globalRowOffset - 1);
            XSSFFunctions.fillHeader(sheet, headerTotalProduct, beanOffset, globalRowOffset);
            XSSFFunctions.fillData(sheet, bean.toArray(), beanOffset, globalRowOffset + 1);
            XSSFFunctions.fixHeaderStyle(sheet, wb, headerBean.length, 1, beanOffset, globalRowOffset - 1);
            XSSFFunctions.fixHeaderStyle(sheet, wb, headerTotalProduct.length, 1, beanOffset, globalRowOffset);
            XSSFFunctions.fixCellStyle(sheet, wb, headerTotalProduct.length, bean.size(), beanOffset, globalRowOffset + 1);
            XSSFFunctions.fixCellFormat(sheet, wb, 2, bean.size(), beanOffset + 1, globalRowOffset + 1);

            sheet = wb.createSheet("Instant");
            sheet.setZoom(85);
            XSSFFunctions.fillHeader(sheet, headerMixes, mixOffset, globalRowOffset);
            XSSFFunctions.fillData(sheet, mix.toArray(), mixOffset, globalRowOffset + 1);
            XSSFFunctions.fixHeaderStyle(sheet, wb, headerMixes.length, mixOffset, 1, globalRowOffset);
            XSSFFunctions.fixCellStyle(sheet, wb, headerMixes.length, mix.size(), mixOffset, globalRowOffset + 1);
            XSSFFunctions.fixCellFormat(sheet, wb, 1, mix.size(), mixOffset + 1, globalRowOffset + 1);

            XSSFFunctions.fillHeader(sheet, headerInstant, instantOffset, globalRowOffset - 1);
            XSSFFunctions.fillHeader(sheet, headerTotalProduct, instantOffset, globalRowOffset);
            XSSFFunctions.fillData(sheet, instant.toArray(), instantOffset, globalRowOffset + 1);
            XSSFFunctions.fixHeaderStyle(sheet, wb, headerInstant.length, 1, instantOffset, globalRowOffset - 1);
            XSSFFunctions.fixHeaderStyle(sheet, wb, headerTotalProduct.length, 1, instantOffset, globalRowOffset);
            XSSFFunctions.fixCellStyle(sheet, wb, headerTotalProduct.length, instant.size(), instantOffset, globalRowOffset + 1);
            XSSFFunctions.fixCellFormat(sheet, wb, 2, instant.size(), instantOffset + 1, globalRowOffset + 1);

            if (textFieldFullPath.getText().length() < 2) {
                JOptionPane.showMessageDialog(this, "Wybierz folder");
            } else {
                File f = new File(textFieldFullPath.getText());
                try {
                    f.createNewFile();
                    try (FileOutputStream outputStream = new FileOutputStream(f)) {
                        wb.write(outputStream);
                        wb.close();
                    }
                    JOptionPane.showMessageDialog(this, "Wygenerowano");
                } catch (FileNotFoundException e) {
                } catch (IOException e) {
                }
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_buttonGenerateActionPerformed

    private void spinnerDateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerDateStateChanged
        SimpleDateFormat model = new SimpleDateFormat("MM-yy");
        textFieldFileName.setText(model.format((Date) spinnerDate.getValue()));        // TODO add your handling code here:
    }//GEN-LAST:event_spinnerDateStateChanged

    private void buildRoasts(ArrayList<RoastData> roast, ArrayList<RoastRaport> alrr) {
        for (RoastRaport r : alrr) {
            roast.add(new RoastData(r.getCompleteTime(), r.getTotalSourceWeight(), r.getTotalRoastWeight(), r.getProductType()));
        }
    }

    private void buildGrind(ArrayList<ProductionData> grind, ArrayList<ProductionRaportPart> alprp) {
        HashMap<ProductType, ProductionData> hm = new HashMap<>();
        for (ProductionRaportPart p : alprp) {
            if (p.getType() == Global.PRODUCT_TYPE_GRIND) {
                float sum = 0;
                if (p.getProductionRaportCoffeeAssignment() != null) {
                    for (ProductionRaportCoffeeAssignment prca : p.getProductionRaportCoffeeAssignment()) {
                        sum += prca.getWeight();
                    }
                }
                if (hm.containsKey(p.getProductType())) {
                    ProductionData temp = hm.get(p.getProductType());
                    temp.producedKG += p.getTotalWeight();
                    temp.producedPCS += p.getTotalPcs();
                    temp.seekKG += sum;
                } else {
                    ProductionData temp = new ProductionData(p.getProductType(), sum, p.getTotalPcs(), p.getTotalWeight());
                    hm.put(p.getProductType(), temp);
                }

            }
        }
        grind.addAll(hm.values());
    }

    private void buildBean(ArrayList<ProductionData> bean, ArrayList<ProductionRaportPart> alprp) {
        HashMap<ProductType, ProductionData> hm = new HashMap<>();
        for (ProductionRaportPart p : alprp) {
            if (p.getType() == Global.PRODUCT_TYPE_BEAN) {
                float sum = 0;
                for (ProductionRaportCoffeeAssignment prca : p.getProductionRaportCoffeeAssignment()) {
                    sum += prca.getWeight();
                }
                if (hm.containsKey(p.getProductType())) {
                    ProductionData temp = hm.get(p.getProductType());
                    temp.producedKG += p.getTotalWeight();
                    temp.producedPCS += p.getTotalPcs();
                    temp.seekKG += sum;
                } else {
                    ProductionData temp = new ProductionData(p.getProductType(), sum, p.getTotalPcs(), p.getTotalWeight());
                    hm.put(p.getProductType(), temp);
                }
            }
        }
        bean.addAll(hm.values());
    }

    private void buildInstant(ArrayList<ProductionData> instant, ArrayList<ProductionRaportPart> alprp) {
        HashMap<ProductType, ProductionData> hm = new HashMap<>();
        for (ProductionRaportPart p : alprp) {
            if (p.getType() == Global.PRODUCT_TYPE_INSTANT) {
                float sum = 0;
                for (ProductionRaportCoffeeAssignment prca : p.getProductionRaportCoffeeAssignment()) {
                    sum += prca.getWeight();
                }
                if (hm.containsKey(p.getProductType())) {
                    ProductionData temp = hm.get(p.getProductType());
                    temp.producedKG += p.getTotalWeight();
                    temp.producedPCS += p.getTotalPcs();
                    temp.seekKG += sum;
                } else {
                    ProductionData temp = new ProductionData(p.getProductType(), sum, p.getTotalPcs(), p.getTotalWeight());
                    hm.put(p.getProductType(), temp);
                }
            }
        }
        instant.addAll(hm.values());
    }

    private void buildMixes(ArrayList<MixData> mix, ArrayList<InstantCoffeeMixRaport> alicmr) {
        for (InstantCoffeeMixRaport icmr : alicmr) {
            mix.add(new MixData(icmr.getMixDate(), icmr.getWeight(), icmr.getProductType()));
        }
    }

    public class ProductionData {

        public ProductionData(ProductType pt, float seekKG, int producedPCS, float producedKG) {
            this.pt = pt;
            this.seekKG = seekKG;
            this.producedKG = producedKG;
            this.producedPCS = producedPCS;
        }

        ProductType pt;
        float seekKG;
        float producedKG;
        int producedPCS;
    }

    public class RoastData {

        public RoastData(Timestamp date, float seekKG, float roastKG, ProductType pt) {
            this.date = date;
            this.waste = Global.round((100 - ((roastKG / seekKG) * 100)), 2);
            this.seekKG = seekKG;
            this.roastKG = roastKG;
            this.pt = pt;
        }

        Timestamp date;
        float waste;
        float seekKG;
        float roastKG;
        ProductType pt;
    }

    public class MixData {

        public MixData(Timestamp date, float weight, ProductType pt) {
            this.date = date;
            this.weight = weight;
            this.pt = pt;
        }

        Timestamp date;
        float weight;
        ProductType pt;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonChooseSaveCatalog;
    private javax.swing.JButton buttonGenerate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSpinner spinnerDate;
    private javax.swing.JTextField textFieldFileName;
    private javax.swing.JTextField textFieldFullPath;
    // End of variables declaration//GEN-END:variables
}
