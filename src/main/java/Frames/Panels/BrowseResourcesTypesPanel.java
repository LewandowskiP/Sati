/* 
 * Copyright 2018 Cafe Sati Polska.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Frames.Panels;

import static Frames.Panels.BrowseProductsToStore.details_column;
import GreenCoffeeClasses.CoffeeAttribute;
import GreenCoffeeClasses.CoffeeGreen;
import GreenCoffeeClasses.CoffeeType;
import GreenCoffeeClasses.PackType;
import GreenCoffeeClasses.Provider;
import ProductClasses.AromaType;
import ProductClasses.DirectPackageType;
import ProductClasses.SugarType;
import ProductionClasses.ProductionRaportPart;
import ProductionManagement.DataBaseConnector;
import ProductionManagement.Global;
import SatiInterfaces.HaveType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Przemysław
 */
public class BrowseResourcesTypesPanel extends javax.swing.JPanel {

    /**
     * Creates new form BrowseResourcesTypesPanel
     */
    DataBaseConnector dbc;
    int dataType;

    public BrowseResourcesTypesPanel() {
        initComponents();
        dbc = Global.getDataBaseConnector();
        dbc.openSession();

        buildTable(dataType);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "Nazwa", "Pełna nazwa", "ZATWIERDŹ", "USUŃ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(3).setMinWidth(80);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(80);
            jTable1.getColumnModel().getColumn(4).setMinWidth(80);
            jTable1.getColumnModel().getColumn(4).setMaxWidth(80);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void loadData(DefaultTableModel dtm) {
        dbc.clearSession();
        ArrayList<HaveType> alht = new ArrayList<HaveType>();
        ArrayList<AromaType> alat = dbc.getAromaType();
        ArrayList<PackType> alpt = dbc.getPackType();
        ArrayList<SugarType> alst = dbc.getSugarType();
        ArrayList<Provider> alp = dbc.getProvider();
        ArrayList<CoffeeType> alct = dbc.getCoffeeType();
        ArrayList<DirectPackageType> aldpt = dbc.getDirectPackageType();
        alht.addAll(alat);
        alht.addAll(alct);
        alht.addAll(alst);
        alht.addAll(aldpt);
        alht.addAll(alp);
        alht.addAll(alpt);
        Object[] toSort = alht.toArray();
        Arrays.sort(toSort);

        dtm.setRowCount(0);
        for (Object o : toSort) {
            HaveType ht = (HaveType) o;
            dtm.addRow(new Object[]{ht, ht.getType(), ht.toString(), false, false});
        }
    }

    private void buildTable(final int type) {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        loadData(dtm);
        dtm.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column = e.getColumn();
                DefaultTableModel model = (DefaultTableModel) e.getSource();
                dbc.openSession();
                if (column == 3) {
                    Boolean checked = (Boolean) jTable1.getValueAt(row, column);
                    if (checked) {
                        HaveType ht = (HaveType) jTable1.getValueAt(row, 0);
                        ht.setType((String) jTable1.getValueAt(row, 1));
                        dbc.saveOrUpdateObject(ht);
                        model.setValueAt(false, row, column);
                        loadData(model);
                    }

                }
                if (column == 4) {
                    Boolean checked = (Boolean) jTable1.getValueAt(row, column);
                    if (checked) {
                        HaveType ht = (HaveType) jTable1.getValueAt(row, 0);
                        try {
                            if (ht instanceof CoffeeType) {
                                CoffeeType ct = (CoffeeType) ht;
                                dbc.startTransation();
                                dbc.getCoffeeGreenWithCoffeeType(ct);
                                if (dbc.getCoffeeGreenWithCoffeeType(ct).isEmpty()) {
                                    HashSet<CoffeeAttribute> clone = new HashSet<CoffeeAttribute>(ct.getCoffeeAttribute());

                                    for (CoffeeAttribute ca : clone) {
                                        ca.getCoffeeType().remove(ct);
                                        ct.getCoffeeAttribute().remove(ca);
                                        dbc.saveTransation(ca);
                                    }
                                    dbc.saveTransation(ct);

                                }
                                dbc.deleteTransation(ct);
                                dbc.commitTransation();
                            } else {
                                dbc.deleteObject(ht);
                            }
                            JOptionPane.showMessageDialog(null, "Usunięto");
                            loadData(model);
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(null, "Wystąpił błąd poczas usuwania.");
                            ex.printStackTrace();
                        }
                        model.setValueAt(false, row, column);

                    }

                }

            }
        });

    }
}
