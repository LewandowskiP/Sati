/* 
 * Copyright 2018 Cafe Sati Polska.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Frames.Panels;

import Exceptions.NotEnoughtCoffeeException;
import Exceptions.ResourceNotFoundException;
import GreenCoffeeClasses.CoffeeGreenChangeHistory;
import Listeners.CheckBoxGreenCoffeeRoastRaport;
import ProductClasses.InstantCoffeeMixRaport;
import ProductClasses.InstantCoffeeMixPart;
import ProductClasses.ProductType;
import ProductionClasses.ProductionCoffee;
import ProductionClasses.ProductionLine;
import ProductionManagement.DataBaseConnector;
import ProductionManagement.Employee;
import ProductionManagement.Global;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Przemysław
 */
public class NewRaportMixCoffeeInstantPanel extends javax.swing.JPanel {

    DataBaseConnector dbc;
    Employee emp;
    InstantCoffeeMixRaport icmr;
    ProductionLine selectedProductionLine;
    ProductType selectedProductType;

    /**
     * Creates new form NewRaportMixCoffeeInstantPanel
     */
    private void setControls(boolean state) {
        comboBoxProductionLine.setEnabled(state);
        comboBoxProductType.setEnabled(state);
        textFieldOtherInfo.setEnabled(state);
        buttonSendRaport.setEnabled(state);
        buttonOpenFile.setEnabled(state);
        tableInstantCoffeeMixPart.setEnabled(state);
        buttonCheck.setEnabled(state);
        buttonEdit.setEnabled(state);
        buttonRefresh.setEnabled(state);

    }

    private void initAll() {
        setControls(false);

        dbc = Global.getDataBaseConnector();
        dbc.openSession();
        ArrayList<ProductionLine> alpl = dbc.getProductionLine();
        comboBoxProductionLine.removeAllItems();
        for (ProductionLine pl : alpl) {
            if (!pl.isRoast()) {
                comboBoxProductionLine.addItem(pl);
            }
        }

        ArrayList<ProductType> alpt = dbc.getProductType(Global.PRODUCT_TYPE_PACK);
        comboBoxProductType.removeAllItems();
        Object[] A = alpt.toArray();
        alpt.toArray(A);
        Arrays.sort(A);
        comboBoxProductType.removeAllItems();
        for (Object pt : A) {
            if (((ProductType) pt).isInstant()) {
                comboBoxProductType.addItem(pt);
            }
        }
        comboBoxProductionLine.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent arg0) {
                dbc.openSession();
                selectedProductionLine = (ProductionLine) comboBoxProductionLine.getSelectedItem();
                if (selectedProductionLine != null) {
                    comboBoxProductType.setEnabled(true);
                } else {
                    comboBoxProductType.setEnabled(false);
                    setControls(false);
                }

            }
        });

        comboBoxProductType.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent arg0) {
                dbc.openSession();
                selectedProductType = (ProductType) comboBoxProductType.getSelectedItem();
                if (selectedProductType != null) {
                    setControls(true);
                    buttonSendRaport.setEnabled(false);
                } else {
                    setControls(false);
                }

            }
        });
        comboBoxProductType.setSelectedItem(null);
        comboBoxProductionLine.setSelectedItem(null);
        comboBoxProductionLine.setEnabled(true);

    }

    public NewRaportMixCoffeeInstantPanel(Employee emp) {
        initComponents();
        initAll();
        tableInstantCoffeeMixPart.getModel().addTableModelListener(new CheckBoxGreenCoffeeRoastRaport(6, 7));
        this.emp = emp;

    }

    private void resetInput() {
        DefaultTableModel dtm = (DefaultTableModel) tableInstantCoffeeMixPart.getModel();
        dtm.setRowCount(0);
        dtm.setRowCount(20);
        comboBoxProductionLine.setSelectedItem(null);
        textFieldOtherInfo.setText("");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableInstantCoffeeMixPart = new javax.swing.JTable();
        buttonCheck = new javax.swing.JButton();
        buttonSendRaport = new javax.swing.JButton();
        textFieldOtherInfo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        buttonEdit = new javax.swing.JButton();
        buttonOpenFile = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        comboBoxProductionLine = new javax.swing.JComboBox();
        comboBoxProductType = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        tableInstantCoffeeMixPart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nr Kontr Surowca", "Kawa", "Nr Kartona", "Nr Parti", "Szczel.", "Waga", "+", "-"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Float.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableInstantCoffeeMixPart.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableInstantCoffeeMixPart);
        if (tableInstantCoffeeMixPart.getColumnModel().getColumnCount() > 0) {
            tableInstantCoffeeMixPart.getColumnModel().getColumn(0).setResizable(false);
            tableInstantCoffeeMixPart.getColumnModel().getColumn(0).setPreferredWidth(200);
            tableInstantCoffeeMixPart.getColumnModel().getColumn(1).setResizable(false);
            tableInstantCoffeeMixPart.getColumnModel().getColumn(1).setPreferredWidth(200);
            tableInstantCoffeeMixPart.getColumnModel().getColumn(2).setResizable(false);
            tableInstantCoffeeMixPart.getColumnModel().getColumn(3).setResizable(false);
            tableInstantCoffeeMixPart.getColumnModel().getColumn(4).setResizable(false);
            tableInstantCoffeeMixPart.getColumnModel().getColumn(5).setResizable(false);
            tableInstantCoffeeMixPart.getColumnModel().getColumn(6).setResizable(false);
            tableInstantCoffeeMixPart.getColumnModel().getColumn(6).setPreferredWidth(30);
            tableInstantCoffeeMixPart.getColumnModel().getColumn(7).setResizable(false);
            tableInstantCoffeeMixPart.getColumnModel().getColumn(7).setPreferredWidth(30);
        }

        buttonCheck.setText("Sprawdź");
        buttonCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCheckActionPerformed(evt);
            }
        });

        buttonSendRaport.setText("Wyślij raport");
        buttonSendRaport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendRaportActionPerformed(evt);
            }
        });

        jLabel4.setText("Uwagi");

        buttonEdit.setText("Przywróc edycję");
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonOpenFile.setText("Otwórz kartę produktu");
        buttonOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenFileActionPerformed(evt);
            }
        });

        buttonRefresh.setText("Odśwież");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        jLabel11.setText("Wybierz linie produkcyjną");

        comboBoxProductionLine.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboBoxProductType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxProductType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxProductTypeActionPerformed(evt);
            }
        });

        jLabel1.setText("Wybierz produkt mieszania");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboBoxProductionLine, 0, 250, Short.MAX_VALUE)
                            .addComponent(comboBoxProductType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonOpenFile, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonRefresh, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonSendRaport)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(10, 10, 10)
                        .addComponent(textFieldOtherInfo)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(comboBoxProductionLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonRefresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxProductType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(buttonOpenFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textFieldOtherInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCheck)
                    .addComponent(buttonEdit)
                    .addComponent(buttonSendRaport))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSendRaportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendRaportActionPerformed
        try {
            dbc.openSession();
            dbc.startTransation();
            dbc.saveTransation(icmr);
            ProductionCoffee pc = new ProductionCoffee();
            pc.setProductType(icmr.getProductType());
            if (icmr.getInstantCoffeeMixPart() != null) {
                for (InstantCoffeeMixPart icmp : icmr.getInstantCoffeeMixPart()) {
                    if (icmp.getCoffeeGreen().getCurrentWeight() == 0) {
                        icmp.getCoffeeGreen().setState(Global.COFFEE_GREEN_OUT_OF_STORE);
                        dbc.saveTransation(icmp.getCoffeeGreen());
                    }
                    dbc.saveTransation(icmp);
                }
            }
            pc.setState(Global.PRODUCTION_COFFEE_READY);
            pc.setWeight(Global.round(icmr.getWeight(), 2));
            icmr.setMixedBy(emp);
            icmr.setSwift(Global.currentShift());
            icmr.setMixDate(new Timestamp(System.currentTimeMillis()));
            icmr.setProductionCoffee(pc);
            icmr.setProductionLine(selectedProductionLine);
            pc.setProdDate(icmr.getMixDate());
            dbc.saveTransation(pc);
            dbc.updateTransation(icmr);
            dbc.commitTransation();
            dbc.clearSession();
            JOptionPane.showMessageDialog(this, "Raport wysłany");
            resetInput();
            initAll();
        } catch (Exception e) {
            e.printStackTrace();
            dbc.rollbackTransation();
            JOptionPane.showMessageDialog(this, "Wystąpił błąd poczas przesyłania raportu.");
        }
    }//GEN-LAST:event_buttonSendRaportActionPerformed

    private void buttonCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCheckActionPerformed
        try {
            dbc.openSession();
            icmr = new InstantCoffeeMixRaport();
            icmr.setMixDate(new Timestamp(System.currentTimeMillis()));
            icmr.setMixedBy(emp);
            icmr.setOtherInfo(textFieldOtherInfo.getText());
            icmr.setSwift(Global.currentShift());
            icmr.setProductType(selectedProductType);

            HashSet< InstantCoffeeMixPart> hsicmp = new HashSet<InstantCoffeeMixPart>(0);
            icmr.setInstantCoffeeMixPart(hsicmp);
            for (int i = 0; i < tableInstantCoffeeMixPart.getModel().getRowCount(); i++) {
                if (tableInstantCoffeeMixPart.getModel().getValueAt(i, 0) == null) {
                    break;
                } else {
                    InstantCoffeeMixPart icmp = new InstantCoffeeMixPart();
                    icmp.setInstantCoffeeMixRaport(icmr);
                    icmp.setWeight(Global.round((Float) tableInstantCoffeeMixPart.getModel().getValueAt(i, 5), 2));
                    icmp.setSealOk((Boolean) tableInstantCoffeeMixPart.getModel().getValueAt(i, 4));
                    icmp.setSerialNumber((String) tableInstantCoffeeMixPart.getModel().getValueAt(i, 3));
                    icmp.setCardBoardNumber((String) tableInstantCoffeeMixPart.getModel().getValueAt(i, 2));
                    icmp.setCoffeeGreen(dbc.getCoffeeGreenWithLabId(tableInstantCoffeeMixPart.getModel().getValueAt(i, 0)));
                    if (icmp.getCoffeeGreen() == null) {
                        throw new ResourceNotFoundException((String) tableInstantCoffeeMixPart.getModel().getValueAt(i, 0));
                    } else if (!icmp.getCoffeeGreen().mix(icmp.getWeight(), emp, icmr)) {
                        throw new NotEnoughtCoffeeException(icmp.getCoffeeGreen().getLabId());
                    }
                    icmr.setWeight(Global.round(icmr.getWeight() + icmp.getWeight(), 2));
                    hsicmp.add(icmp);
                }
            }
            setControls(false);
            buttonEdit.setEnabled(true);
            buttonRefresh.setEnabled(true);
            buttonSendRaport.setEnabled(true);

        } catch (NotEnoughtCoffeeException e) {
            JOptionPane.showMessageDialog(this, ("Nie wystarczająca ilość kawy lub zabielacza o ID " + e.getMessage()));
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Wprowadzone dane nie zostały zatwierdzone lub są błędnie wprowadzone.");
        } catch (ResourceNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Kawa lub zabielacz o ID " + ex.getMessage() + " nie istnieje.");
        }

    }//GEN-LAST:event_buttonCheckActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        buttonSendRaport.setEnabled(false);
        buttonCheck.setEnabled(true);
        buttonOpenFile.setEnabled(true);
        tableInstantCoffeeMixPart.setEnabled(true);
        comboBoxProductionLine.setEnabled(true);
        comboBoxProductType.setEnabled(true);
        textFieldOtherInfo.setEnabled(true);

    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenFileActionPerformed
        selectedProductType.openFileInstant(Global.FILE_READ_ONLY);
    }//GEN-LAST:event_buttonOpenFileActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        initAll();
        resetInput();
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void comboBoxProductTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxProductTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxProductTypeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCheck;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonOpenFile;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonSendRaport;
    private javax.swing.JComboBox comboBoxProductType;
    private javax.swing.JComboBox comboBoxProductionLine;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableInstantCoffeeMixPart;
    private javax.swing.JTextField textFieldOtherInfo;
    // End of variables declaration//GEN-END:variables
}
