/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames.Panels;

import ProductionClasses.ProductionCoffeeReturn;
import ProductionClasses.ProductionCoffeeSeek;
import ProductionManagement.DataBaseConnector;
import ProductionManagement.Employee;

import ProductionManagement.Global;
import java.sql.Timestamp;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Przemysław
 */
public class ManageProductionCoffeeSeek extends javax.swing.JPanel {

    /**
     * Creates new form ManageProductionCoffeeSeek
     */
    DataBaseConnector dbc;
    public int warden;
    
    public ManageProductionCoffeeSeek(final Employee emp) {
        initComponents();
        
        dbc = Global.getDataBaseConnector();
        dbc.openSession();
        int i = 0;
        warden = 0;
        DefaultTableModel dtm = (DefaultTableModel) tableProductionCoffeeSettlement.getModel();
        for (ProductionCoffeeSeek pcs : dbc.getProductionCoffeeSeekWithEmployee(emp)) {
            dtm.addRow(new Object[]{pcs, new Float(pcs.getWeight()), null, false});
            if (pcs.getWeight() == 0) {
                tableProductionCoffeeSettlement.setValueAt(Global.PRODUCTION_COFFEE_USED, i, 2);
            } else {
                tableProductionCoffeeSettlement.setValueAt(Global.PRODUCTION_COFFEE_NOT_USED, i, 2);
                warden++;
            }
            i++;
        }
        
        tableProductionCoffeeSettlement.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column = e.getColumn();
                if (column == 3) {
                    TableModel model = (TableModel) e.getSource();
                    Boolean checked = (Boolean) model.getValueAt(row, column);
                    if (checked) {
                        if (model.getValueAt(row, column - 1) != Global.PRODUCTION_COFFEE_USED) {
                            if (model.getValueAt(row, column - 1) != Global.PRODUCTION_COFFEE_RETURNED) {
                                model.setValueAt(Global.PRODUCTION_COFFEE_RETURNED, row, column - 1);
                                ProductionCoffeeSeek pcs = ((ProductionCoffeeSeek) model.getValueAt(row, 0));
                                ProductionCoffeeReturn pcr = new ProductionCoffeeReturn();
                                String comment = null;
                                boolean whileWarden = true;
                                while (whileWarden) {
                                    comment = (String) JOptionPane.showInputDialog(null, "Podaj komentarz do zwrotu.", "Zwrot", JOptionPane.QUESTION_MESSAGE, null, null, null);
                                    if (comment != null) {
                                        if (comment.length() > 3) {
                                            whileWarden = false;
                                        }
                                    }
                                }
                                pcr.setInfo(comment);
                                warden--;
                                pcr.setProductionCoffee(pcs.getProductionCoffee());
                                pcr.setReturnedBy(emp);
                                pcr.setReturnedTime(new Timestamp(System.currentTimeMillis()));
                                pcr.setWeight(pcs.getWeight());
                                dbc.openSession();
                                dbc.saveObject(pcr);
                            }
                        }
                        model.setValueAt(false, row, column);
                    }
                }
            }
        }
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableProductionCoffeeSettlement = new javax.swing.JTable();

        tableProductionCoffeeSettlement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nazwa kawy", "Pozostała ilość", "Status", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Float.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductionCoffeeSettlement.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableProductionCoffeeSettlement);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableProductionCoffeeSettlement;
    // End of variables declaration//GEN-END:variables
}
