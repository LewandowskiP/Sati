/* 
 * Copyright 2018 Cafe Sati Polska.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Frames.Panels;

import ProductClasses.ProductType;
import ProductionManagement.DataBaseConnector;
import ProductionManagement.Global;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Przemysław
 */
public class BrowseProductTypeHallManagerPanel extends javax.swing.JPanel {

    ArrayList<ProductType> alpt = null;
    DataBaseConnector dbc;

    /**
     * Creates new form BrowseProductTypePanel
     */
    public BrowseProductTypeHallManagerPanel() {
        initComponents();
        reload();

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(dtm);

        List<RowSorter.SortKey> sortKeys;
        sortKeys = new ArrayList(1);
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
        jTable1.setRowSorter(sorter);

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = jTable1.rowAtPoint(evt.getPoint());
                int col = jTable1.columnAtPoint(evt.getPoint());

                if (col == 5) {

                    if ((Boolean) jTable1.getValueAt(row, col) == true) {
                        ProductType pt = (ProductType) jTable1.getValueAt(row, 0);
                        String[] options = new String[2];
                        options[0] = "Tak";
                        options[1] = "Nie";
                        int res = JOptionPane.showOptionDialog(null, "Czy na pewno chcesz zmienić ukrycie produktu.", "Potwierdzenie", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
                        if (res == JOptionPane.YES_OPTION) {
                            dbc.setProductTypeState(pt, !pt.isHidden());
                            reload();
                        }
                        jTable1.setValueAt(false, row, col);
                    }
                }

            }
        }
        );
    }

    private String productTypeToString(ProductType pt) {
        if (pt.getType() == Global.PRODUCT_TYPE_PACK) {
            return "PAK";
        } else {
            return "PAL";
        }
    }

    private void reload() {
        if (dbc == null) {
            dbc = Global.getDataBaseConnector();
        }
        dbc.clearSession();
        dbc.openSession();
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        alpt = dbc.getProductType(Global.PRODUCT_TYPE_PACK);
        alpt.addAll(dbc.getProductType(Global.PRODUCT_TYPE_ROAST));
        for (ProductType pt : alpt) {
            String state = "Aktywny";
            if (pt.isHidden()) {
                state = "Nieaktywny";
            }
            String inst = "";
            if (pt.isInstant()) {
                inst = "Instant";
            }
            dtm.addRow(new Object[]{pt, productTypeToString(pt), inst, pt.getEan(), state, false});
        }
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonBrowseProductVersions = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonFilter = new javax.swing.JButton();
        buttonResetFilter = new javax.swing.JButton();

        buttonBrowseProductVersions.setText("Pokaż kartę");
        buttonBrowseProductVersions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBrowseProductVersionsActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nazwa produktu", "Typ karty", "Instant", "EAN13"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(500);
        }

        buttonFilter.setText("Filtr");
        buttonFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFilterActionPerformed(evt);
            }
        });

        buttonResetFilter.setText("Resetuj");
        buttonResetFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonBrowseProductVersions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonResetFilter)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBrowseProductVersions)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonFilter)
                        .addComponent(buttonResetFilter)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadTableWithFilter(String filter) {
        if (dbc == null) {
            dbc = Global.getDataBaseConnector();
        }
        dbc.clearSession();
        dbc.openSession();
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        alpt = dbc.getProductTypeGroupByNameTypeFilter(filter);
        for (ProductType pt : alpt) {
            String state = "Aktywny";
            if (pt.isHidden()) {
                state = "Nieaktywny";
            }
            String inst = "";
            if (pt.isInstant()) {
                inst = "Instant";
            }
            dtm.addRow(new Object[]{pt, productTypeToString(pt), inst, pt.getEan(), state, false});
        }
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private void buttonBrowseProductVersionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBrowseProductVersionsActionPerformed
        ProductType pt = (ProductType) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
        pt.openFile(Global.FILE_READ_ONLY);
    }//GEN-LAST:event_buttonBrowseProductVersionsActionPerformed

    private void buttonFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFilterActionPerformed
        String filter = JOptionPane.showInputDialog("Wprowadź filtr");
        loadTableWithFilter(filter);
    }//GEN-LAST:event_buttonFilterActionPerformed

    private void buttonResetFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetFilterActionPerformed
        reload();
    }//GEN-LAST:event_buttonResetFilterActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBrowseProductVersions;
    private javax.swing.JButton buttonFilter;
    private javax.swing.JButton buttonResetFilter;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
