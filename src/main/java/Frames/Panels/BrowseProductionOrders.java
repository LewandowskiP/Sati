/* 
 * Copyright 2018 Cafe Sati Polska.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Frames.Panels;

import ProductClasses.ProductType;
import ProductionClasses.ProductionLine;
import ProductionClasses.ProductionOrder;
import ProductionManagement.DataBaseConnector;
import ProductionManagement.Employee;
import ProductionManagement.Global;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Przemysław
 */
public class BrowseProductionOrders extends javax.swing.JPanel {

    /**
     * Creates new form ManageProductionOrders
     */
    DataBaseConnector dbc = Global.getDataBaseConnector();
    ProductionLine selectedProductionLine;
    ProductionOrder selectedProductionOrderValue;
    int selectedProductionOrderIndex;
    ProductType selectedProductType;
    Employee emp;

    private void initProductionLines() {
        ArrayList<ProductionLine> alpl = dbc.getProductionLine();
        comboBoxProductionLine.removeAllItems();
        for (ProductionLine pl : alpl) {
            comboBoxProductionLine.addItem(pl);
        }
        comboBoxProductionLine.setSelectedItem(null);
    }

    private void loadProductionOrders(ProductionLine productionLine) {
        Timestamp from = new Timestamp(((Date) spinnerFrom.getValue()).getTime()); 
        Timestamp to = new Timestamp(((Date) spinnerFrom.getValue()).getTime());
        ArrayList<ProductionOrder> alpo = dbc.getProductionOrdersHistoryFromTo(productionLine,from,to);
        DefaultTableModel dtm;
        dtm = (DefaultTableModel) tableProductionOrders.getModel();
        dtm.setRowCount(0);
        Collections.sort(alpo);
        for (ProductionOrder po : alpo) {
            dtm.addRow(new Object[]{
                po.getProductType(),
                po.getStartQuantity(),
                Global.timestampToStrYYMMDDhhmm(po.getDeadline()),
                Global.timestampToStrYYMMDDhhmm(po.getCompleteTime()),
                po.getOtherInfo(),
                po.isImportant() ? "TAK" : "NIE"});
        }
    }

    public BrowseProductionOrders(Employee emp) {
        initComponents();
        initProductionLines();
        this.emp = emp;
        DefaultTableModel dtm = (DefaultTableModel) tableProductionOrders.getModel();
        dtm.setRowCount(0);
        comboBoxProductionLine.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent arg0) {
                selectedProductionLine = (ProductionLine) comboBoxProductionLine.getSelectedItem();
                if (selectedProductionLine != null) {
                    loadProductionOrders(selectedProductionLine);
                }
            }
        }
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        comboBoxProductionLine = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProductionOrders = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        spinnerFrom = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        spinnerTo = new javax.swing.JSpinner();

        jLabel7.setText("Wybierz linię produkcyjną");

        comboBoxProductionLine.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxProductionLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxProductionLineActionPerformed(evt);
            }
        });

        jButton1.setText("Odśwież");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tableProductionOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Produkt", "Ilość paleń/palet", "Deadline", "Data zakończenia", "Dodatkowe informacje", "Ważne"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductionOrders.setColumnSelectionAllowed(true);
        tableProductionOrders.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableProductionOrders);
        tableProductionOrders.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tableProductionOrders.getColumnModel().getColumnCount() > 0) {
            tableProductionOrders.getColumnModel().getColumn(1).setMinWidth(150);
            tableProductionOrders.getColumnModel().getColumn(1).setPreferredWidth(150);
            tableProductionOrders.getColumnModel().getColumn(1).setMaxWidth(150);
            tableProductionOrders.getColumnModel().getColumn(2).setMinWidth(150);
            tableProductionOrders.getColumnModel().getColumn(2).setPreferredWidth(150);
            tableProductionOrders.getColumnModel().getColumn(2).setMaxWidth(150);
            tableProductionOrders.getColumnModel().getColumn(3).setMinWidth(150);
            tableProductionOrders.getColumnModel().getColumn(3).setPreferredWidth(150);
            tableProductionOrders.getColumnModel().getColumn(3).setMaxWidth(150);
            tableProductionOrders.getColumnModel().getColumn(5).setMinWidth(50);
            tableProductionOrders.getColumnModel().getColumn(5).setPreferredWidth(50);
            tableProductionOrders.getColumnModel().getColumn(5).setMaxWidth(50);
        }

        jLabel3.setText("Od");

        spinnerFrom.setModel(new javax.swing.SpinnerDateModel());

        jLabel4.setText("do");

        spinnerTo.setModel(new javax.swing.SpinnerDateModel());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 874, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxProductionLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxProductionLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spinnerFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)
                        .addComponent(spinnerTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dbc.clearSession();
        dbc.openSession();
        loadProductionOrders(selectedProductionLine);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void comboBoxProductionLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxProductionLineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxProductionLineActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboBoxProductionLine;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner spinnerFrom;
    private javax.swing.JSpinner spinnerTo;
    private javax.swing.JTable tableProductionOrders;
    // End of variables declaration//GEN-END:variables
}
