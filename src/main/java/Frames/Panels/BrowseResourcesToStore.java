/* 
 * Copyright 2018 Cafe Sati Polska.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Frames.Panels;

import GreenCoffeeClasses.CoffeeGreen;
import ProductClasses.Aroma;
import ProductClasses.Cardboard;
import ProductClasses.DirectPackage;

import ProductClasses.ReadyCoffee;
import ProductClasses.Sugar;
import ProductionClasses.ProductionCoffee;
import ProductionClasses.ProductionCoffeeExternalReturn;
import ProductionManagement.DataBaseConnector;
import ProductionManagement.Employee;
import ProductionManagement.Global;
import SatiExtends.Test;
import SatiInterfaces.Details;
import java.util.ArrayList;
import javax.print.DocFlavor;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Przemysław
 */
public class BrowseResourcesToStore extends javax.swing.JPanel {
    
    Employee emp;
    /**
     * Creates new form GreenCoffeeToCheckListPanel
     */
    DataBaseConnector dbc = null;
    
    private void reload() {
        
        dbc.openSession();
        DefaultTableModel dtm = (DefaultTableModel) tableResources.getModel();
        dtm.setRowCount(0);
        
        ArrayList<CoffeeGreen> alcg = dbc.getCoffeeGreenToStore();
        for (CoffeeGreen o : alcg) {
            dtm.addRow(new Object[]{o, false});
            
        }
        ArrayList<Aroma> ala = dbc.getAromaToStore();
        for (Aroma o : ala) {
            dtm.addRow(new Object[]{o, false});
        }
        
        ArrayList<ProductionCoffeeExternalReturn> alpcer = dbc.getProductionCoffeeExternalReturnToStore();
        for (ProductionCoffeeExternalReturn o : alpcer) {
            dtm.addRow(new Object[]{o, false});
        }
        
        ArrayList<Sugar> als = dbc.getSugarToStore();
        for (Sugar o : als) {
            dtm.addRow(new Object[]{o, false});
        }
        ArrayList<DirectPackage> aldp = dbc.getDirectPackageToStore();
        for (DirectPackage o : aldp) {
            dtm.addRow(new Object[]{o, false});
        }
        ArrayList<ReadyCoffee> alrc = dbc.getReadyCoffeeToStore();
        for (ReadyCoffee o : alrc) {
            dtm.addRow(new Object[]{o, false});
        }
    }
    
    public BrowseResourcesToStore(Employee emp) {
        initComponents();
        if (dbc == null) {
            
            dbc = Global.getDataBaseConnector();
        }
        this.emp = emp;
        dbc.openSession();
        reload();
        
        tableResources.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = tableResources.rowAtPoint(evt.getPoint());
                int col = tableResources.columnAtPoint(evt.getPoint());
                if (col == 0) {
                    Details selected = (Details) tableResources.getModel().getValueAt(row, col);
                    selected.showDetails();
                }
                
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableResources = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();

        jButton1.setText("Drukuj listę");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Zatwierdź zmagazynowanie surowców");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tableResources.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Surowiec", "Do zatwierdzenia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableResources);
        if (tableResources.getColumnModel().getColumnCount() > 0) {
            tableResources.getColumnModel().getColumn(1).setMinWidth(120);
            tableResources.getColumnModel().getColumn(1).setPreferredWidth(120);
            tableResources.getColumnModel().getColumn(1).setMaxWidth(120);
        }

        jButton3.setText("Wycofaj");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            StringBuilder sb = new StringBuilder();
            sb.append("List produktów do zmagazynowania z dostawy.").append(System.lineSeparator()).append(System.lineSeparator());
            sb.append("Zlecił:  ").append(emp.toString()).append(System.lineSeparator()).append(System.lineSeparator());
            DefaultTableModel dtm = (DefaultTableModel) tableResources.getModel();
            for (int i = 0; i < dtm.getRowCount(); i++) {
                Object o = dtm.getValueAt(i, 0);
                if (o.getClass() == CoffeeGreen.class) {
                    CoffeeGreen cg = (CoffeeGreen) o;
                    sb.append("    ").append(i + 1).append(". ").append(cg).append(" ").append(cg.getArrivalWeight()).append(" Kg").append(System.lineSeparator()).append(System.lineSeparator());
                };
                if (o.getClass() == Aroma.class) {
                    Aroma a = (Aroma) o;
                    sb.append("    ").append(i + 1).append(". ").append(a).append(" ").append(a.getArrivalQuantity()).append(" Kg").append(System.lineSeparator()).append(System.lineSeparator());
                };
                if (o.getClass() == ProductionCoffeeExternalReturn.class) {
                    ProductionCoffeeExternalReturn pcer = (ProductionCoffeeExternalReturn) o;
                    sb.append("    ").append(i + 1).append(". ").append(pcer).append(" ").append(pcer.getWeight()).append(" Kg").append(System.lineSeparator()).append(System.lineSeparator());
                };
                if (o.getClass() == Sugar.class) {
                    Sugar pcer = (Sugar) o;
                    sb.append("    ").append(i + 1).append(". ").append(pcer).append(" ").append(pcer.getQuantity()).append(" szt").append(System.lineSeparator()).append(System.lineSeparator());
                };
                
                if (o.getClass() == DirectPackage.class) {
                    DirectPackage pcer = (DirectPackage) o;
                    sb.append("    ").append(i + 1).append(". ").append(pcer).append(" ").append(pcer.getWeight()).append(" Kg").append(System.lineSeparator()).append(System.lineSeparator());
                };
                if (o.getClass() == ReadyCoffee.class) {
                    ReadyCoffee pcer = (ReadyCoffee) o;
                    sb.append("    ").append(i + 1).append(". ").append(pcer).append(" ").append(pcer.getArrivalWeight()).append(" Kg").append(System.lineSeparator()).append(System.lineSeparator());
                };
                
            }
            
            DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE;
            PrintService[] services = PrintServiceLookup.lookupPrintServices(flavor, null);
            PrintService defaultService = PrintServiceLookup.lookupDefaultPrintService();
            if (services.length != 0) {
                if (defaultService != null) {
                    JTextArea text = new JTextArea(sb.toString());
                    PrintService service = PrintServiceLookup.lookupDefaultPrintService();
                    text.print(null, null, false, service, null, false);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) tableResources.getModel();
        for (int i = 0; i < dtm.getRowCount(); i++) {
            if ((Boolean) dtm.getValueAt(i, 1) == true) {
                Test o = (Test) dtm.getValueAt(i, 0);
                
                if (o.getClass() == ProductionCoffeeExternalReturn.class) {
                    ProductionCoffeeExternalReturn pcer = (ProductionCoffeeExternalReturn) o;
                    pcer.setState(Global.PRODUCTION_COFFEE_EXTERNAL_READY_TO_USE);
                    ProductionCoffee pc = new ProductionCoffee();
                    pc.setProductType(pcer.getProductionRaportPart().getProductType());
                    pc.setState(Global.PRODUCTION_COFFEE_READY);
                    pc.setWeight(pcer.getWeight());
                    pc.setReturned(true);
                    pc.setUsed(false);
                    pc.setProdDate(pcer.getReturnDate());
                    dbc.saveObject(pc);
                    pcer.setProductionCoffee(pc);
                    dbc.saveObject(pcer);
                    continue;
                };
                
                if (o.getClass() == ReadyCoffee.class) {
                    ReadyCoffee rc = (ReadyCoffee) o;
                    rc.setState(Global.PRODUCTION_COFFEE_EXTERNAL_READY_TO_USE);
                    
                    dbc.updateObject(rc);
                    continue;
                };
                
                o.setState(Global.READY_TO_USE);
                dbc.updateObject(o);
                
            }
        }
        JOptionPane.showMessageDialog(null, "Zatwierdzono zmagazynowanie surowców", "Informacja", JOptionPane.INFORMATION_MESSAGE);
        reload();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Object selected = tableResources.getValueAt(tableResources.getSelectedRow(), 0);
        String options[] = new String[]{"Tak", "Nie"};
        int result = JOptionPane.showOptionDialog(null, ("Czy na pewno chcesz usunąć pozycję: " + System.lineSeparator() + selected.toString()), "Uwaga!", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        if (JOptionPane.OK_OPTION == result) {
            dbc.deleteObject(selected);
            reload();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableResources;
    // End of variables declaration//GEN-END:variables
}
