/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames.Panels;

import GreenCoffeeClasses.CoffeeGreen;
import GreenCoffeeClasses.CoffeeGreenChangeHistory;
import GreenCoffeeClasses.CoffeeType;
import ProductionManagement.DataBaseConnector;
import ProductionManagement.Employee;
import ProductionManagement.Global;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Przemysław
 */
public class BrowseAvailableGreenCoffeeStoremanPanel extends javax.swing.JPanel {

    CoffeeType selectedCoffeeType;
    DataBaseConnector dbc;
    Employee emp;
    CoffeeGreen selectedCoffeeGreen;

    /**
     * Creates new form BrowseAvailableGreenCoffeePanel
     */
    public BrowseAvailableGreenCoffeeStoremanPanel(Employee e) {
        initComponents();
        if (dbc == null) {
            dbc = Global.getDataBaseConnector();
        }
        dbc.openSession();
        final DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        emp = e;

        ArrayList<CoffeeType> alct = dbc.getCoffeeType();

        Object[] o = alct.toArray();
        Arrays.sort(o);

        comboBoxGreenCoffeeType.removeAllItems();
        for (Object ob : o) {
            CoffeeType ct = (CoffeeType) ob;
            comboBoxGreenCoffeeType.addItem(ct);
        }
        comboBoxGreenCoffeeType.setSelectedItem(null);

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = jTable1.rowAtPoint(evt.getPoint());

                selectedCoffeeGreen = (CoffeeGreen) dtm.getValueAt(row, 0);
            }
        }
        );
        comboBoxGreenCoffeeType.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent arg0) {
                float sum = 0;
                dbc.openSession();
                selectedCoffeeType = (CoffeeType) comboBoxGreenCoffeeType.getSelectedItem();
                ArrayList<CoffeeGreen> alcg = dbc.getCoffeeGreenWithCoffeeType(selectedCoffeeType);

                dtm.setRowCount(0);
                for (CoffeeGreen cg : alcg) {
                    sum += cg.getCurrentWeight();
                    dtm.addRow(new Object[]{cg, cg.getCurrentWeight()});
                }
                labelCoffeeSum.setText("SUMA ILOŚCI KAWY: " + sum + " KG");
                jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBoxGreenCoffeeType = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        buttonReload = new javax.swing.JButton();
        labelCoffeeSum = new javax.swing.JLabel();
        buttonChangeCoffeeWeight = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        comboBoxGreenCoffeeType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Wybierz rodzaj kawy zielonej do sprawdzenia");

        buttonReload.setText("Odśwież");
        buttonReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReloadActionPerformed(evt);
            }
        });

        labelCoffeeSum.setText("SUMA ILOŚĆI KAWY : ");

        buttonChangeCoffeeWeight.setText("Zmień stan");
        buttonChangeCoffeeWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChangeCoffeeWeightActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nazwa", "Stan"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setMinWidth(100);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        jButton1.setText("Szczegóły");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 345, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboBoxGreenCoffeeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelCoffeeSum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonChangeCoffeeWeight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonReload))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxGreenCoffeeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonReload)
                    .addComponent(labelCoffeeSum)
                    .addComponent(buttonChangeCoffeeWeight)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReloadActionPerformed
        dbc.clearSession();
        comboBoxGreenCoffeeType.setSelectedItem(null);
    }//GEN-LAST:event_buttonReloadActionPerformed

    private void buttonChangeCoffeeWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChangeCoffeeWeightActionPerformed
        try {
            final DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();

            String s = (String) JOptionPane.showInputDialog(this, "Podaj wartość", "Edycja", JOptionPane.QUESTION_MESSAGE, null, null, null);
            CoffeeGreen cg = selectedCoffeeGreen;
            float changeValue = (Float.valueOf(s)) - cg.getCurrentWeight();

            cg.setCurrentWeight(Float.valueOf(s));
            if (cg.getCurrentWeight() == 0) {
                cg.setState(Global.COFFEE_GREEN_OUT_OF_STORE);
            }
            if (cg.getCurrentWeight() < 0) {
                throw new WeightLessThanZero();
            }
            CoffeeGreenChangeHistory cgch = new CoffeeGreenChangeHistory();
            cgch.setChangeTime(new Timestamp(System.currentTimeMillis()));
            cgch.setCoffeeGreen(cg);
            cgch.setWeight(changeValue);
            cgch.setChangedBy(emp);
            String comment = (String) JOptionPane.showInputDialog(this, "Podaj komentarz do zmiany", "Edycja", JOptionPane.QUESTION_MESSAGE, null, null, null);
            cgch.setComment(comment);
            if (comment != null) {
                if (!comment.isEmpty()) {
                    dbc.openSession();
                    dbc.saveObject(cgch);
                    dbc.updateObject(cg);

                    Float sum = new Float(0);
                    ArrayList<CoffeeGreen> alcg = dbc.getCoffeeGreenWithCoffeeType(selectedCoffeeType);

                    dtm.setRowCount(0);
                    for (CoffeeGreen c : alcg) {
                        sum += c.getCurrentWeight();
                        dtm.addRow(new Object[]{c, c.getCurrentWeight()});
                    }
                    labelCoffeeSum.setText("SUMA ILOŚCI KAWY: " + sum + " KG");
                    jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                }
            }
        } catch (WeightLessThanZero e) {
            JOptionPane.showMessageDialog(this, "Zmieniono ilość kawy na wartość ujemną.");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Zmiana nie wprowadzona, proszę wprowadzić dane prawidłowo.");
        }

    }//GEN-LAST:event_buttonChangeCoffeeWeightActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            selectedCoffeeGreen.showDetails();
        } catch (Exception e) {
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonChangeCoffeeWeight;
    private javax.swing.JButton buttonReload;
    private javax.swing.JComboBox comboBoxGreenCoffeeType;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelCoffeeSum;
    // End of variables declaration//GEN-END:variables

    private static class WeightLessThanZero extends Exception {

        public WeightLessThanZero() {
        }
    }
}
